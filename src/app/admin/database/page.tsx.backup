'use client';

import React, { useState, useEffect, useRef } from 'react';
import { EditableCell } from '@/components/admin/EditableCell';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { 
  Database, 
  Users, 
  Calendar, 
  Bookmark, 
  Plus, 
  Edit, 
  Trash2, 
  RefreshCw,
  Eye,
  Download,
  HardHat,
  Trophy,
  CalendarDays,
  DollarSign,
  Settings,
  Clock,
  MapPin
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import AdminBookingCard from '@/components/admin/AdminBookingCard';

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  level: string;
  createdAt: string;
}

interface TimeSlot {
  id: string;
  clubId: string;
  courtId: string | null;
  instructorId: string | null;
  start: string;
  end: string;
  maxPlayers: number;
  totalPrice: number | null;
  level: string | null;
  category: string | null;
  createdAt: string;
}

interface Booking {
  id: string;
  userId: string;
  timeSlotId: string;
  groupSize: number;
  status: string;
  createdAt: string;
  userName: string | null;
  userLevel: string | null;
  userGender: string | null;
  start: string;
  end: string;
  maxPlayers: number;
  totalPrice: number | null;
  classLevel: string | null;
  classCategory: string | null;
  instructorName: string | null;
  instructorProfilePicture: string | null;
  courtNumber: number | null;
  bookedPlayers: number;
}

interface Court {
  id: string;
  clubId: string;
  number: number;
  name: string;
  isActive: boolean;
  capacity: number;
  createdAt: string;
}

interface Match {
  id: string;
  clubId: string;
  courtId: string | null;
  date: string;
  time: string;
  level: string;
  maxPlayers: number;
  price: number;
  status: string;
  createdAt: string;
}

export default function DatabaseAdminPanel() {
  const { toast } = useToast();
  const [users, setUsers] = useState<User[]>([]);
  const [timeSlots, setTimeSlots] = useState<TimeSlot[]>([]);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [admins, setAdmins] = useState<User[]>([]);
  const [clubs, setClubs] = useState<any[]>([]);
  const [instructors, setInstructors] = useState<any[]>([]);
  const [clients, setClients] = useState<User[]>([]);
  const [courts, setCourts] = useState<any[]>([]);
  const [matches, setMatches] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedClubId, setSelectedClubId] = useState<string>('all');
  const [selectedProfile, setSelectedProfile] = useState<string>('super-admin');
  const [selectedUserId, setSelectedUserId] = useState<string>('');
  const [mounted, setMounted] = useState(false);
  
  // Estados para edición
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [editingClub, setEditingClub] = useState<any | null>(null);
  
  // Usar useRef para rastrear si el componente está montado y evitar memory leaks
  const isMountedRef = useRef(true);

  // Estados para formularios
  const [newUser, setNewUser] = useState({
    name: '',
    email: '',
    role: 'PLAYER',
    level: 'abierto',
    clubId: 'auto-assign'
  });

  const [newClub, setNewClub] = useState({
    name: '',
    address: '',
    phone: '',
    email: '',
    website: '',
    description: '',
    adminId: ''
  });

  const [newInstructor, setNewInstructor] = useState({
    userId: '',
    clubId: '',
    specialties: '',
    experience: ''
  });

  const [newClient, setNewClient] = useState({
    name: '',
    email: '',
    level: 'principiante',
    clubId: ''
  });

  const [newSuperAdmin, setNewSuperAdmin] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const [newClubAdmin, setNewClubAdmin] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    clubId: '',
    phone: ''
  });

  const [newCourt, setNewCourt] = useState({
    clubId: '',
    number: 1,
    name: '',
    capacity: 4,
    isActive: true
  });

  const [newMatch, setNewMatch] = useState({
    clubId: '',
    courtId: '',
    date: '',
    time: '',
    level: 'principiante',
    maxPlayers: 4,
    price: 0
  });

  const [newTimeSlot, setNewTimeSlot] = useState({
    clubId: '',
    courtId: '',
    instructorId: '',
    date: '',
    startTime: '',
    endTime: '',
    maxPlayers: 4,
    totalPrice: 25,
    level: 'abierto',
    category: 'class'
  });

  const loadData = async (clubId: string = selectedClubId) => {
    if (!isMountedRef.current) return; // Evitar actualización si el componente está desmontado
    
    setLoading(true);
    try {
      // Agregar parámetro clubId a las URLs si no es "all"
      const clubParam = clubId !== 'all' ? `?clubId=${clubId}` : '';
      
      // Cargar usuarios
      const usersResponse = await fetch(`/api/admin/users${clubParam}`);
      if (usersResponse.ok && isMountedRef.current) {
        const usersData = await usersResponse.json();
        setUsers(usersData);
      }

      // Cargar timeslots  
      const timeSlotsResponse = await fetch(`/api/admin/timeslots${clubParam}`);
      if (timeSlotsResponse.ok) {
        const timeSlotsData = await timeSlotsResponse.json();
        setTimeSlots(timeSlotsData);
      }

      // Cargar bookings
      const bookingsResponse = await fetch(`/api/admin/bookings${clubParam}`);
      if (bookingsResponse.ok) {
        const bookingsData = await bookingsResponse.json();
        setBookings(bookingsData);
      }

      // Cargar administradores - filtrar según el club seleccionado
      const adminsResponse = await fetch(`/api/admin/admins${clubParam}`);
      if (adminsResponse.ok) {
        const adminsData = await adminsResponse.json();
        setAdmins(adminsData);
      }

      // Cargar clubes (siempre cargar todos para el selector)
      const clubsResponse = await fetch('/api/admin/clubs');
      if (clubsResponse.ok) {
        const clubsData = await clubsResponse.json();
        setClubs(clubsData);
      }

      // Cargar instructores
      const instructorsResponse = await fetch(`/api/admin/instructors${clubParam}`);
      if (instructorsResponse.ok) {
        const instructorsData = await instructorsResponse.json();
        setInstructors(instructorsData);
      }

      // Cargar clientes
      const clientsResponse = await fetch(`/api/admin/clients${clubParam}`);
      if (clientsResponse.ok) {
        const clientsData = await clientsResponse.json();
        setClients(clientsData);
      }

      // Cargar pistas
      const courtsResponse = await fetch(`/api/admin/courts${clubParam}`);
      if (courtsResponse.ok) {
        const courtsData = await courtsResponse.json();
        setCourts(courtsData);
      }

      // Cargar partidas
      const matchesResponse = await fetch(`/api/admin/matches${clubParam}`);
      if (matchesResponse.ok) {
        const matchesData = await matchesResponse.json();
        setMatches(matchesData);
      }
    } catch (error) {
      console.error('Error loading data:', error);
      toast({
        title: 'Error',
        description: 'Error loading database data',
        variant: 'destructive'
      });
    } finally {
      if (isMountedRef.current) {
        setLoading(false);
      }
    }
  };

  useEffect(() => {
    // Marcar el componente como montado
    isMountedRef.current = true;
    setMounted(true);
    
    // Usar requestAnimationFrame para asegurar que el DOM esté listo
    const frame = requestAnimationFrame(() => {
      if (isMountedRef.current) {
        loadData();
      }
    });
    
    return () => {
      // Cleanup: marcar como desmontado y cancelar animación
      isMountedRef.current = false;
      cancelAnimationFrame(frame);
    };
  }, []);

  useEffect(() => {
    if (mounted && isMountedRef.current) {
      loadData();
    }
  }, [selectedClubId, mounted]);

  const handleClubChange = (clubId: string) => {
    setSelectedClubId(clubId);
    loadData(clubId);
  };

  const handleProfileChange = (profile: string) => {
    setSelectedProfile(profile);
    setSelectedUserId(''); // Reset user selection when profile changes
    setActiveTab('overview'); // Reset to overview tab when profile changes
  };

  const handleUserChange = (userId: string) => {
    setSelectedUserId(userId);
  };

  // Function to get available users based on selected profile
  const getAvailableUsers = () => {
    switch (selectedProfile) {
      case 'super-admin':
        // Combinar admins reales con super admins ficticios si no hay suficientes
        const realSuperAdmins = admins.filter(admin => admin.role === 'SUPER_ADMIN' || admin.role === 'ADMIN');
        const fictionalSuperAdmins = [
          { id: 'super-admin-1', name: 'Cristian Parra', email: 'cristian.parra@padelpro.com', role: 'SUPER_ADMIN' },
          { id: 'super-admin-2', name: 'Juan Martinez', email: 'juan.martinez@padelpro.com', role: 'SUPER_ADMIN' },
          { id: 'super-admin-3', name: 'Maria Rodriguez', email: 'maria.rodriguez@padelpro.com', role: 'SUPER_ADMIN' }
        ];
        
        // Si no hay suficientes super admins reales, agregar los ficticios
        const allSuperAdmins = realSuperAdmins.length > 0 ? realSuperAdmins : fictionalSuperAdmins;
        return [...allSuperAdmins, ...fictionalSuperAdmins.filter(f => !allSuperAdmins.find(r => r.name === f.name))];
        
      case 'club-admin':
        // Para administradores de club, mostrar administradores de TODOS los clubes disponibles
        // No filtrar por el club seleccionado en el filtro de super admin
        const realClubAdmins = admins.filter(admin => admin.role === 'CLUB_ADMIN' || admin.role === 'ADMIN');
        
        // Crear administradores ficticios para TODOS los clubes (no solo el seleccionado)
        const allClubs = clubs.length > 0 ? clubs : [
          { id: 'club-madrid', name: 'Club Padel Madrid', address: 'Madrid, España' },
          { id: 'club-barcelona', name: 'Club Padel Barcelona', address: 'Barcelona, España' }
        ];
        
        const fictionalClubAdmins = allClubs.flatMap((club, index) => {
          const adminNames = [
            ['Juan Pérez', 'María González'],
            ['Carlos Rodríguez', 'Ana Martínez'],
            ['Luis Fernández', 'Carmen López'],
            ['Diego Sánchez', 'Isabel Ruiz']
          ];
          
          const names = adminNames[index] || ['Admin Principal', 'Admin Secundario'];
          const cityName = club.name.includes('Madrid') ? 'madrid' : 
                          club.name.includes('Barcelona') ? 'barcelona' : 
                          club.name.toLowerCase().replace(/\s+/g, '').replace(/club/, '').replace(/padel/, '');
          
          return [
            { 
              id: `club-admin-${club.id}-1`, 
              name: names[0],
              email: `${names[0].toLowerCase().replace(/\s+/g, '').replace(/ñ/g, 'n')}@${cityName}.com`, 
              role: 'CLUB_ADMIN',
              clubId: club.id,
              clubName: club.name,
              position: 'Director General'
            },
            { 
              id: `club-admin-${club.id}-2`, 
              name: names[1],
              email: `${names[1].toLowerCase().replace(/\s+/g, '').replace(/ñ/g, 'n')}@${cityName}.com`, 
              role: 'CLUB_ADMIN',
              clubId: club.id,
              clubName: club.name,
              position: 'Administrador'
            }
          ];
        });
        
        // Siempre mostrar los administradores ficticios para que se vean todos los clubes
        return fictionalClubAdmins;
      case 'instructor':
        return instructors.map(inst => ({ ...inst, name: inst.name || 'Instructor sin nombre' }));
      case 'client':
        return users.filter(user => user.role === 'PLAYER');
      default:
        return [];
    }
  };

  // Function to determine what data to show based on profile and user selection
  const getFilteredData = () => {
    if (selectedProfile === 'super-admin') {
      // Super admin can see everything
      return {
        showAllTabs: true,
        restrictToClub: selectedClubId !== 'all' ? selectedClubId : null
      };
    } else if (selectedProfile === 'club-admin' && selectedUserId) {
      // Club admin can only see their club's data
      const adminClub = clubs.find(club => club.adminId === selectedUserId);
      if (adminClub) {
        return {
          showAllTabs: true,
          restrictToClub: adminClub.id
        };
      }
    } else if (selectedProfile === 'instructor' && selectedUserId) {
      // Instructor can only see their classes and related data
      const selectedInstructor = instructors.find(inst => inst.id === selectedUserId);
      return {
        showAllTabs: false,
        restrictToClub: selectedInstructor?.clubId || null,
        restrictToInstructor: selectedUserId
      };
    } else if (selectedProfile === 'client' && selectedUserId) {
      // Client can only see their bookings
      return {
        showAllTabs: false,
        restrictToClub: null,
        restrictToUser: selectedUserId
      };
    }
    return { showAllTabs: true, restrictToClub: null };
  };

  // Function to get available tabs based on profile
  const getAvailableTabs = () => {
    switch (selectedProfile) {
      case 'super-admin':
        return [
          { id: 'overview', label: '📊 Dashboard', show: true },
          { id: 'admins', label: `👑 Admins (${admins.length})`, show: true },
          { id: 'clubs', label: `🏢 Clubs (${clubs.length})`, show: true },
          { id: 'courts', label: '🏟️ Pistas', show: true },
          { id: 'instructors', label: `👨‍🏫 Instructors (${instructors.length})`, show: true },
          { id: 'clients', label: `🏓 Clients (${clients.length})`, show: true },
          { id: 'users', label: `👥 Users (${users.length})`, show: true },
          { id: 'timeslots', label: `📅 Classes (${timeSlots.length})`, show: true },
          { id: 'bookings', label: `📋 Bookings (${bookings.length})`, show: true },
          { id: 'matches', label: '🏆 Partidas', show: true },
          { id: 'calendar', label: '📅 Calendario', show: true },
          { id: 'settings', label: '⚙️ Config', show: true }
        ];
      case 'club-admin':
        return [
          { id: 'overview', label: '📊 Dashboard', show: true },
          { id: 'courts', label: '🏟️ Pistas', show: true },
          { id: 'instructors', label: `👨‍🏫 Instructors (${instructors.length})`, show: true },
          { id: 'clients', label: `🏓 Clients (${clients.length})`, show: true },
          { id: 'users', label: `👥 Users (${users.length})`, show: true },
          { id: 'timeslots', label: `📅 Classes (${timeSlots.length})`, show: true },
          { id: 'bookings', label: `📋 Bookings (${bookings.length})`, show: true },
          { id: 'matches', label: '🏆 Partidas', show: true },
          { id: 'calendar', label: '📅 Calendario', show: true },
          { id: 'rates', label: '💰 Tarifas', show: true },
          { id: 'settings', label: '⚙️ Config', show: true }
        ];
      case 'instructor':
        return [
          { id: 'overview', label: '📊 Mi Panel', show: true },
          { id: 'timeslots', label: `📅 Mis Classes (${timeSlots.length})`, show: true },
          { id: 'bookings', label: `📋 Mis Reservas (${bookings.length})`, show: true },
          { id: 'calendar', label: '📅 Mi Calendario', show: true }
        ];
      case 'client':
        return [
          { id: 'overview', label: '📊 Mi Panel', show: true },
          { id: 'bookings', label: `📋 Mis Reservas (${bookings.length})`, show: true },
          { id: 'calendar', label: '📅 Mis Clases', show: true }
        ];
      default:
        return [];
    }
  };

  const createUser = async () => {
    try {
      // Solo enviar los campos que existen en el esquema
      const userData = {
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
        level: newUser.level,
        clubId: newUser.clubId === 'auto-assign' ? undefined : newUser.clubId
      };

      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'User created successfully'
        });
        setNewUser({ name: '', email: '', role: 'PLAYER', level: 'abierto', clubId: 'auto-assign' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating user',
        variant: 'destructive'
      });
    }
  };

  const createSuperAdmin = async () => {
    try {
      // Validación básica
      if (!newSuperAdmin.name || !newSuperAdmin.email || !newSuperAdmin.password) {
        toast({
          title: 'Error',
          description: 'Todos los campos son obligatorios',
          variant: 'destructive'
        });
        return;
      }

      if (newSuperAdmin.password !== newSuperAdmin.confirmPassword) {
        toast({
          title: 'Error',
          description: 'Las contraseñas no coinciden',
          variant: 'destructive'
        });
        return;
      }

      // Crear super administrador
      const superAdminData = {
        name: newSuperAdmin.name,
        email: newSuperAdmin.email,
        password: newSuperAdmin.password,
        role: 'SUPER_ADMIN'
      };

      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(superAdminData)
      });

      if (response.ok) {
        toast({
          title: 'Éxito',
          description: `Super Administrador ${newSuperAdmin.name} creado exitosamente`
        });
        setNewSuperAdmin({ name: '', email: '', password: '', confirmPassword: '' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creando super administrador',
        variant: 'destructive'
      });
    }
  };

  const createClubAdmin = async () => {
    try {
      // Validación básica
      if (!newClubAdmin.name || !newClubAdmin.email || !newClubAdmin.password || !newClubAdmin.clubId) {
        toast({
          title: 'Error',
          description: 'Todos los campos marcados con * son obligatorios',
          variant: 'destructive'
        });
        return;
      }

      if (newClubAdmin.password !== newClubAdmin.confirmPassword) {
        toast({
          title: 'Error',
          description: 'Las contraseñas no coinciden',
          variant: 'destructive'
        });
        return;
      }

      // Crear administrador de club
      const clubAdminData = {
        name: newClubAdmin.name,
        email: newClubAdmin.email,
        password: newClubAdmin.password,
        phone: newClubAdmin.phone,
        role: 'CLUB_ADMIN',
        clubId: newClubAdmin.clubId
      };

      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(clubAdminData)
      });

      if (response.ok) {
        const selectedClub = clubs.find(c => c.id === newClubAdmin.clubId);
        toast({
          title: 'Éxito',
          description: `Administrador ${newClubAdmin.name} creado exitosamente para ${selectedClub?.name || 'el club seleccionado'}`
        });
        setNewClubAdmin({ name: '', email: '', password: '', confirmPassword: '', clubId: '', phone: '' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creando administrador de club',
        variant: 'destructive'
      });
    }
  };

  const deleteUser = async (userId: string) => {
    if (!confirm('Are you sure you want to delete this user?')) return;
    
    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'User deleted successfully'
        });
        loadData();
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Error deleting user',
        variant: 'destructive'
      });
    }
  };

  const updateUser = async (userData: User) => {
    try {
      const response = await fetch(`/api/admin/users/${userData.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: userData.name,
          email: userData.email,
          level: userData.level,
          role: userData.role
        })
      });

      if (response.ok) {
        toast({
          title: 'Éxito',
          description: 'Usuario actualizado correctamente'
        });
        setEditingUser(null);
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error actualizando usuario',
        variant: 'destructive'
      });
    }
  };

  const editUserInline = (field: string, value: string, userId: string) => {
    const user = users.find(u => u.id === userId);
    if (user) {
      const updatedUser = { ...user, [field]: value };
      updateUser(updatedUser);
    }
  };

  const createClub = async () => {
    try {
      // Validación básica
      if (!newClub.name || !newClub.address || !newClub.adminId) {
        toast({
          title: 'Error',
          description: 'Name, address, and administrator are required',
          variant: 'destructive'
        });
        return;
      }

      const response = await fetch('/api/admin/clubs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newClub)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Club created successfully'
        });
        setNewClub({ name: '', address: '', phone: '', email: '', website: '', description: '', adminId: '' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating club',
        variant: 'destructive'
      });
    }
  };

  const createInstructor = async () => {
    try {
      const response = await fetch('/api/admin/instructors', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newInstructor)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Instructor created successfully'
        });
        setNewInstructor({ userId: '', clubId: '', specialties: '', experience: '' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating instructor',
        variant: 'destructive'
      });
    }
  };

  const createClient = async () => {
    try {
      const userData = {
        name: newClient.name,
        email: newClient.email,
        role: 'PLAYER',
        level: newClient.level
      };

      const response = await fetch('/api/admin/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Client created successfully'
        });
        setNewClient({ name: '', email: '', level: 'principiante', clubId: '' });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating client',
        variant: 'destructive'
      });
    }
  };

  const createCourt = async () => {
    try {
      if (!newCourt.clubId || !newCourt.name) {
        toast({
          title: 'Error',
          description: 'Please fill in all required fields',
          variant: 'destructive'
        });
        return;
      }

      const courtData = {
        clubId: newCourt.clubId,
        number: newCourt.number,
        name: newCourt.name,
        capacity: newCourt.capacity,
        isActive: newCourt.isActive
      };

      const response = await fetch('/api/admin/courts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(courtData)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Court created successfully'
        });
        setNewCourt({
          clubId: '',
          number: 1,
          name: '',
          capacity: 4,
          isActive: true
        });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating court',
        variant: 'destructive'
      });
    }
  };

  const createMatch = async () => {
    try {
      if (!newMatch.clubId || !newMatch.date || !newMatch.time) {
        toast({
          title: 'Error',
          description: 'Please fill in all required fields',
          variant: 'destructive'
        });
        return;
      }

      const matchData = {
        clubId: newMatch.clubId,
        courtId: newMatch.courtId,
        date: newMatch.date,
        time: newMatch.time,
        level: newMatch.level,
        maxPlayers: newMatch.maxPlayers,
        price: newMatch.price
      };

      const response = await fetch('/api/admin/matches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(matchData)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Match created successfully'
        });
        setNewMatch({
          clubId: '',
          courtId: '',
          date: '',
          time: '',
          level: 'abierto',
          maxPlayers: 4,
          price: 25
        });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating match',
        variant: 'destructive'
      });
    }
  };

  const createTimeSlot = async () => {
    try {
      if (!newTimeSlot.clubId || !newTimeSlot.date || !newTimeSlot.startTime || !newTimeSlot.endTime) {
        toast({
          title: 'Error',
          description: 'Please fill in all required fields',
          variant: 'destructive'
        });
        return;
      }

      // Combinar fecha y horas para crear timestamps
      const startDateTime = new Date(`${newTimeSlot.date}T${newTimeSlot.startTime}`);
      const endDateTime = new Date(`${newTimeSlot.date}T${newTimeSlot.endTime}`);

      const timeSlotData = {
        clubId: newTimeSlot.clubId,
        courtId: newTimeSlot.courtId || null,
        instructorId: newTimeSlot.instructorId || null,
        start: startDateTime.toISOString(),
        end: endDateTime.toISOString(),
        maxPlayers: newTimeSlot.maxPlayers,
        totalPrice: newTimeSlot.totalPrice,
        level: newTimeSlot.level,
        category: newTimeSlot.category
      };

      const response = await fetch('/api/admin/timeslots', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(timeSlotData)
      });

      if (response.ok) {
        toast({
          title: 'Success',
          description: 'Time slot created successfully'
        });
        setNewTimeSlot({
          clubId: '',
          courtId: '',
          instructorId: '',
          date: '',
          startTime: '',
          endTime: '',
          maxPlayers: 4,
          totalPrice: 25,
          level: 'abierto',
          category: 'class'
        });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error creating time slot',
        variant: 'destructive'
      });
    }
  };

  const generateGroupClasses = async () => {
    try {
      const today = new Date();
      const clubId = selectedClubId !== 'all' ? selectedClubId : 'club-1';
      
      const response = await fetch('/api/admin/generate-class-proposals', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          date: today.toISOString(),
          clubId: clubId
        })
      });

      if (response.ok) {
        const result = await response.json();
        toast({
          title: 'Clases Generadas',
          description: `Se crearon ${result.slots.length} propuestas de clases grupales`,
          className: 'bg-green-500 text-white'
        });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error generando clases grupales',
        variant: 'destructive'
      });
    }
  };

  const generateWeeklyClasses = async () => {
    try {
      const clubId = selectedClubId !== 'all' ? selectedClubId : 'club-1';
      
      const response = await fetch(`/api/admin/generate-class-proposals?clubId=${clubId}&days=7`);

      if (response.ok) {
        const result = await response.json();
        toast({
          title: 'Clases Semanales Generadas',
          description: `Se crearon ${result.totalSlots} propuestas de clases para 7 días`,
          className: 'bg-green-500 text-white'
        });
        loadData();
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error generando clases semanales',
        variant: 'destructive'
      });
    }
  };

  // Funciones para obtener datos específicos del usuario seleccionado
  const getSelectedUserData = () => {
    if (!selectedUserId) return null;
    return users.find(user => user.id === selectedUserId);
  };

  const getSelectedUserBookings = () => {
    if (!selectedUserId) return [];
    return bookings.filter(booking => booking.userId === selectedUserId);
  };

  const getSelectedUserStats = () => {
    const userData = getSelectedUserData();
    const userBookings = getSelectedUserBookings();
    
    if (!userData) return null;

    const confirmedBookings = userBookings.filter(b => b.status === 'CONFIRMED');
    const cancelledBookings = userBookings.filter(b => b.status === 'CANCELLED');
    const completedBookings = userBookings.filter(b => 
      b.status === 'CONFIRMED' && new Date(b.end) < new Date()
    );
    const upcomingBookings = userBookings.filter(b => 
      b.status === 'CONFIRMED' && new Date(b.start) > new Date()
    );

    return {
      user: userData,
      totalBookings: userBookings.length,
      confirmedBookings: confirmedBookings.length,
      cancelledBookings: cancelledBookings.length,
      completedBookings: completedBookings.length,
      upcomingBookings: upcomingBookings.length,
      totalSpent: confirmedBookings.reduce((sum, booking) => sum + (booking.totalPrice || 0), 0),
      recentBookings: userBookings.slice(0, 5)
    };
  };

  const exportData = () => {
    const data = {
      users,
      admins,
      clubs,
      instructors,
      clients,
      timeSlots,
      bookings,
      exportedAt: new Date().toISOString()
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { 
      type: 'application/json' 
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `padelpro-database-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!mounted || loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <RefreshCw className="h-8 w-8 animate-spin" />
        <span className="ml-2">Cargando base de datos...</span>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-6 space-y-8 max-w-7xl">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 bg-white p-6 rounded-lg shadow-sm">
          <div>
            <h1 className="text-3xl font-bold flex items-center gap-3">
              <Database className="h-8 w-8 text-blue-600" />
              Database Admin Panel
            </h1>
            <p className="text-gray-600 mt-2">
              Manage users, classes, and bookings
            </p>
          </div>
          <div className="flex gap-3">
            <Button onClick={exportData} variant="outline" className="flex items-center gap-2">
              <Download className="h-4 w-4" />
              Export Data
            </Button>
            <Button onClick={() => loadData()} variant="outline" className="flex items-center gap-2">
              <RefreshCw className="h-4 w-4" />
              Refresh
            </Button>
          </div>
        </div>

        {/* Sistema de Perfiles y Acceso */}
        <Card className="shadow-sm">
          <CardContent className="p-6">
            <div className="space-y-6">
              <h2 className="text-xl font-semibold flex items-center gap-3">
                🔐 Sistema de Acceso por Perfiles
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Selector de Perfil */}
            <div className="space-y-2">
              <Label htmlFor="profile-selector" className="text-sm font-medium">
                👤 Tipo de Perfil:
              </Label>
              <Select value={selectedProfile} onValueChange={handleProfileChange}>
                <SelectTrigger id="profile-selector">
                  <SelectValue placeholder="Selecciona un perfil" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="super-admin">🌟 Super Administrador</SelectItem>
                  <SelectItem value="club-admin">👑 Administrador de Club</SelectItem>
                  <SelectItem value="instructor">👨‍� Instructor</SelectItem>
                  <SelectItem value="client">🏓 Cliente/Usuario</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Selector de Usuario */}
            <div className="space-y-2">
              <Label htmlFor="user-selector" className="text-sm font-medium">
                👥 Usuario:
              </Label>
              <Select value={selectedUserId} onValueChange={handleUserChange}>
                <SelectTrigger id="user-selector">
                  <SelectValue placeholder="Selecciona un usuario" />
                </SelectTrigger>
                <SelectContent>
                  {getAvailableUsers().map((user) => (
                    <SelectItem key={user.id} value={user.id}>
                      <div className="flex flex-col">
                        <span className="font-medium">
                          {user.name || user.email || user.id}
                        </span>
                        {selectedProfile === 'club-admin' && user.position && (
                          <span className="text-xs text-purple-600 font-medium">💼 {user.position}</span>
                        )}
                        {user.email && user.name && (
                          <span className="text-xs text-gray-500">{user.email}</span>
                        )}
                        {selectedProfile === 'club-admin' && (
                          <span className="text-xs text-blue-600 font-medium">
                            {(() => {
                              // Priorizar clubName si existe (admins ficticios)
                              if (user.clubName) {
                                return `🏢 ${user.clubName}`;
                              }
                              
                              // Buscar club usando clubId o adminId (admins reales)
                              const userClub = clubs.find(club => 
                                (user.clubId && club.id === user.clubId) ||
                                club.adminId === user.id
                              );
                              
                              if (userClub) {
                                return `🏢 ${userClub.name}`;
                              }
                              
                              // Si no encuentra club específico, mostrar advertencia
                              return '⚠️ Club no asignado';
                            })()}
                          </span>
                        )}
                        {selectedProfile === 'instructor' && (
                          <span className="text-xs text-green-600">
                            {(() => {
                              const instructor = instructors.find(inst => inst.id === user.id);
                              return instructor?.specialties ? `🎯 ${instructor.specialties}` : '🎯 Sin especialidades';
                            })()}
                          </span>
                        )}
                        {selectedProfile === 'client' && (
                          <span className="text-xs text-purple-600">
                            {(() => {
                              const client = clients.find(c => c.id === user.id);
                              return client?.level ? `🏆 Nivel: ${client.level}` : '🏆 Sin nivel especificado';
                            })()}
                          </span>
                        )}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Selector de Club (solo para Super Admin) */}
            {selectedProfile === 'super-admin' && (
              <div className="space-y-2">
                <Label htmlFor="club-selector" className="text-sm font-medium">
                  🏢 Filtrar por Club:
                </Label>
                <Select value={selectedClubId} onValueChange={handleClubChange}>
                  <SelectTrigger id="club-selector">
                    <SelectValue placeholder="Selecciona un club" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">🌐 Todos los Clubes</SelectItem>
                    {clubs.map((club) => (
                      <SelectItem key={club.id} value={club.id}>
                        🏢 {club.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          {/* Información del acceso actual */}
          <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="text-sm space-y-1">
              <div>
                <strong>Perfil de acceso:</strong> {' '}
                {selectedProfile === 'super-admin' && '🌟 Super Administrador - Acceso completo al sistema'}
                {selectedProfile === 'club-admin' && '👑 Administrador de Club - Gestión completa del club asignado'}
                {selectedProfile === 'instructor' && '👨‍🏫 Instructor - Acceso a sus clases y estudiantes'}
                {selectedProfile === 'client' && '🏓 Cliente - Acceso a sus reservas y datos personales'}
              </div>
              
              {selectedUserId && (
                <div>
                  <strong>Usuario del sistema:</strong> {' '}
                  <span className="text-purple-700 font-medium">
                    👨‍💼 {getAvailableUsers().find(u => u.id === selectedUserId)?.name || 'Usuario seleccionado'}
                  </span>
                  {getAvailableUsers().find(u => u.id === selectedUserId)?.email && (
                    <span className="text-gray-600 ml-1">
                      ({getAvailableUsers().find(u => u.id === selectedUserId)?.email})
                    </span>
                  )}
                </div>
              )}

              {selectedProfile === 'club-admin' && selectedUserId && (
                <div className="space-y-1">
                  <div>
                    <strong>Administrador:</strong> {' '}
                    {(() => {
                      const selectedUser = getAvailableUsers().find(u => u.id === selectedUserId);
                      return (
                        <span className="text-blue-700 font-medium">
                          👤 {selectedUser?.name || 'Usuario seleccionado'}
                        </span>
                      );
                    })()}
                  </div>
                  <div>
                    <strong>Club a administrar:</strong> {' '}
                    {(() => {
                      const selectedUser = getAvailableUsers().find(u => u.id === selectedUserId);
                      
                      // Si el usuario ficticio tiene clubName, usarlo directamente
                      if (selectedUser?.clubName) {
                        const clubAddress = clubs.find(club => 
                          club.name === selectedUser.clubName || 
                          (selectedUser.clubId && club.id === selectedUser.clubId)
                        )?.address;
                        
                        return (
                          <span className="text-green-700 font-medium">
                            🏢 {selectedUser.clubName}
                            {clubAddress && <span className="text-gray-600 ml-1 block">📍 {clubAddress}</span>}
                          </span>
                        );
                      }
                      
                      // Para usuarios reales, buscar el club
                      const userClub = clubs.find(club => 
                        (selectedUser?.clubId && club.id === selectedUser.clubId) ||
                        club.adminId === selectedUserId
                      );
                      
                      return userClub ? (
                        <span className="text-green-700 font-medium">
                          🏢 {userClub.name}
                          {userClub.address && <span className="text-gray-600 ml-1 block">📍 {userClub.address}</span>}
                        </span>
                      ) : (
                        <span className="text-orange-600">⚠️ Club no encontrado - Verificar asignación</span>
                      );
                    })()}
                  </div>
                </div>
              )}

              {selectedProfile === 'instructor' && selectedUserId && (
                <div>
                  <strong>Especialidades:</strong> {' '}
                  {(() => {
                    const instructor = instructors.find(inst => inst.id === selectedUserId);
                    return instructor?.specialties ? (
                      <span className="text-green-700">{instructor.specialties}</span>
                    ) : (
                      <span className="text-gray-500">No especificadas</span>
                    );
                  })()}
                </div>
              )}

              {selectedProfile === 'client' && selectedUserId && (
                <div>
                  <strong>Nivel:</strong> {' '}
                  {(() => {
                    const client = clients.find(c => c.id === selectedUserId);
                    return client?.level ? (
                      <span className="text-blue-700 font-medium">🏆 {client.level}</span>
                    ) : (
                      <span className="text-gray-500">No especificado</span>
                    );
                  })()}
                </div>
              )}

              {selectedProfile === 'super-admin' && selectedClubId && selectedClubId !== 'all' && (
                <div>
                  <strong>Filtro de club:</strong> {' '}
                  <span className="text-purple-700 font-medium">
                    🏢 {clubs.find(c => c.id === selectedClubId)?.name || 'Club seleccionado'}
                  </span>
                </div>
              )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-sm">
          <CardContent className="p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
              <TabsList className="grid w-full grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 h-auto p-1 bg-gray-100">
                {getAvailableTabs().map((tab) => (
                  <TabsTrigger 
                    key={tab.id} 
                    value={tab.id}
                    className="text-xs sm:text-sm py-2 px-2 data-[state=active]:bg-white data-[state=active]:shadow-sm"
                  >
                    {tab.label}
                  </TabsTrigger>
                ))}
              </TabsList>

        <TabsContent value="overview" className="space-y-4">
          {/* Vista de Super Admin y Club Admin - Estadísticas del sistema */}
          {(selectedProfile === 'super-admin' || selectedProfile === 'club-admin') && (
            <>
              <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-6">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">👑 Administrators</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{admins.length}</div>
                    <p className="text-xs text-muted-foreground">
                      System and club administrators
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">🏢 Clubs</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{clubs.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Registered padel clubs
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">🏟️ Courts</CardTitle>
                    <HardHat className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{courts.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Available padel courts
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">👨‍🏫 Instructors</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{instructors.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Active instructors
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">🏓 Clients</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{clients.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Active players/clients
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">🏆 Matches</CardTitle>
                    <Trophy className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{matches.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Scheduled matches
                    </p>
                  </CardContent>
                </Card>
              </div>

              <div className="grid gap-4 md:grid-cols-3">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Users</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{users.length}</div>
                    <p className="text-xs text-muted-foreground">
                      All users in the system
                    </p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Available Classes</CardTitle>
                    <Calendar className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{timeSlots.length}</div>
                    <p className="text-xs text-muted-foreground">
                      Time slots available for booking
                    </p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Total Bookings</CardTitle>
                    <Bookmark className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{bookings.length}</div>
                    <p className="text-xs text-muted-foreground">
                      All time reservations
                    </p>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Recent Activity</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {bookings
                      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
                      .slice(0, 5)
                      .map((booking) => (
                        <div key={booking.id} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                          <span>{booking.userName || booking.userId} booked class {booking.timeSlotId}</span>
                          <Badge variant={booking.status === 'CONFIRMED' ? 'default' : 'secondary'}>
                            {booking.status}
                          </Badge>
                        </div>
                      ))
                    }
                  </div>
                </CardContent>
              </Card>
            </>
          )}

          {/* Vista de Cliente - Panel personal */}
          {selectedProfile === 'client' && selectedUserId && (
            <>
              {(() => {
                const userStats = getSelectedUserStats();
                if (!userStats) return <div>Selecciona un usuario para ver sus datos</div>;
                
                return (
                  <>
                    {/* Información personal del usuario */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-3">
                          👤 Mi Perfil Personal
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid gap-4 md:grid-cols-2">
                          <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-600">Nombre Completo</Label>
                            <div className="p-3 bg-gray-50 rounded-lg">
                              <span className="text-lg font-medium">{userStats.user.name}</span>
                            </div>
                          </div>
                          <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-600">Email</Label>
                            <div className="p-3 bg-gray-50 rounded-lg">
                              <span className="text-lg">{userStats.user.email}</span>
                            </div>
                          </div>
                          <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-600">Nivel de Juego</Label>
                            <div className="p-3 bg-blue-50 rounded-lg">
                              <Badge variant="outline" className="text-lg px-3 py-1">
                                🏆 {userStats.user.level}
                              </Badge>
                            </div>
                          </div>
                          <div className="space-y-2">
                            <Label className="text-sm font-medium text-gray-600">Miembro desde</Label>
                            <div className="p-3 bg-green-50 rounded-lg">
                              <span className="text-lg">📅 {new Date(userStats.user.createdAt).toLocaleDateString('es-ES')}</span>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    {/* Estadísticas de reservas */}
                    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">📋 Mis Reservas</CardTitle>
                          <Bookmark className="h-4 w-4 text-muted-foreground" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold">{userStats.totalBookings}</div>
                          <p className="text-xs text-muted-foreground">
                            Total de reservas realizadas
                          </p>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">✅ Confirmadas</CardTitle>
                          <Calendar className="h-4 w-4 text-green-600" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold text-green-600">{userStats.confirmedBookings}</div>
                          <p className="text-xs text-muted-foreground">
                            Clases confirmadas
                          </p>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">🎯 Completadas</CardTitle>
                          <Trophy className="h-4 w-4 text-blue-600" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold text-blue-600">{userStats.completedBookings}</div>
                          <p className="text-xs text-muted-foreground">
                            Clases ya realizadas
                          </p>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                          <CardTitle className="text-sm font-medium">💰 Total Gastado</CardTitle>
                          <DollarSign className="h-4 w-4 text-purple-600" />
                        </CardHeader>
                        <CardContent>
                          <div className="text-2xl font-bold text-purple-600">€{userStats.totalSpent.toFixed(2)}</div>
                          <p className="text-xs text-muted-foreground">
                            Invertido en clases
                          </p>
                        </CardContent>
                      </Card>
                    </div>

                    {/* Próximas clases */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          🔮 Mis Próximas Clases
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        {userStats.upcomingBookings > 0 ? (
                          <div className="space-y-2">
                            <div className="text-lg font-medium text-green-600">
                              Tienes {userStats.upcomingBookings} clase{userStats.upcomingBookings > 1 ? 's' : ''} programada{userStats.upcomingBookings > 1 ? 's' : ''}
                            </div>
                            <p className="text-sm text-gray-600">
                              Ve a la pestaña "Mis Reservas" para ver los detalles completos
                            </p>
                          </div>
                        ) : (
                          <div className="text-center py-8">
                            <div className="text-4xl mb-2">📅</div>
                            <div className="text-lg text-gray-600">No tienes clases programadas</div>
                            <p className="text-sm text-gray-500 mt-2">
                              ¡Reserva tu próxima clase de pádel!
                            </p>
                          </div>
                        )}
                      </CardContent>
                    </Card>

                    {/* Historial reciente */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                          📈 Mi Actividad Reciente
                        </CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-2">
                          {userStats.recentBookings.length > 0 ? (
                            userStats.recentBookings.map((booking) => (
                              <div key={booking.id} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                                <div className="flex flex-col">
                                  <span className="font-medium">Clase reservada</span>
                                  <span className="text-sm text-gray-600">
                                    {new Date(booking.createdAt).toLocaleDateString('es-ES')}
                                  </span>
                                </div>
                                <Badge variant={booking.status === 'CONFIRMED' ? 'default' : 'secondary'}>
                                  {booking.status === 'CONFIRMED' ? 'Confirmada' : 
                                   booking.status === 'CANCELLED' ? 'Cancelada' : booking.status}
                                </Badge>
                              </div>
                            ))
                          ) : (
                            <div className="text-center py-4 text-gray-500">
                              No hay actividad reciente
                            </div>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  </>
                );
              })()}
            </>
          )}

          {/* Vista de Instructor - Panel de instructor */}
          {selectedProfile === 'instructor' && selectedUserId && (
            <div className="text-center py-8">
              <div className="text-4xl mb-2">👨‍🏫</div>
              <div className="text-lg text-gray-600">Panel de Instructor</div>
              <p className="text-sm text-gray-500 mt-2">
                Vista específica para instructores en desarrollo
              </p>
            </div>
          )}

          {/* Mensaje cuando no hay usuario seleccionado */}
          {(selectedProfile === 'client' || selectedProfile === 'instructor') && !selectedUserId && (
            <div className="text-center py-12">
              <div className="text-4xl mb-4">👤</div>
              <div className="text-xl text-gray-600 mb-2">Selecciona un usuario</div>
              <p className="text-gray-500">
                Elige un {selectedProfile === 'client' ? 'cliente' : 'instructor'} del selector superior para ver su información personalizada
              </p>
            </div>
          )}
        </TabsContent>

        <TabsContent value="admins" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">👑 Administrators Management</span>
                <div className="flex gap-2">
                  {selectedProfile === 'super-admin' && (
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="outline">
                          <Plus className="h-4 w-4 mr-2" />
                          🌟 Add Super Admin
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Create New Super Administrator</DialogTitle>
                          <DialogDescription>
                            Create a new super administrator with full system access
                          </DialogDescription>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="superAdminName">Full Name *</Label>
                            <Input
                              id="superAdminName"
                              value={newSuperAdmin.name}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewSuperAdmin({...newSuperAdmin, name: e.target.value})}
                              placeholder="e.g., Cristian Parra"
                            />
                          </div>
                          <div>
                            <Label htmlFor="superAdminEmail">Email *</Label>
                            <Input
                              id="superAdminEmail"
                              type="email"
                              value={newSuperAdmin.email}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewSuperAdmin({...newSuperAdmin, email: e.target.value})}
                              placeholder="superadmin@padelpro.com"
                            />
                          </div>
                          <div>
                            <Label htmlFor="superAdminPassword">Password *</Label>
                            <Input
                              id="superAdminPassword"
                              type="password"
                              value={newSuperAdmin.password}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewSuperAdmin({...newSuperAdmin, password: e.target.value})}
                              placeholder="Enter secure password"
                            />
                          </div>
                          <div>
                            <Label htmlFor="superAdminConfirmPassword">Confirm Password *</Label>
                            <Input
                              id="superAdminConfirmPassword"
                              type="password"
                              value={newSuperAdmin.confirmPassword}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewSuperAdmin({...newSuperAdmin, confirmPassword: e.target.value})}
                              placeholder="Confirm password"
                            />
                          </div>
                        </div>
                        <DialogFooter>
                          <Button type="submit" onClick={createSuperAdmin}>
                            🌟 Create Super Admin
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  )}
                  {selectedProfile === 'super-admin' && (
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button variant="outline">
                          <Plus className="h-4 w-4 mr-2" />
                          👑 Add Club Admin
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Create New Club Administrator</DialogTitle>
                          <DialogDescription>
                            Create a new administrator for a specific club
                          </DialogDescription>
                        </DialogHeader>
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="clubAdminName">Full Name *</Label>
                            <Input
                              id="clubAdminName"
                              value={newClubAdmin.name}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClubAdmin({...newClubAdmin, name: e.target.value})}
                              placeholder="e.g., María González"
                            />
                          </div>
                          <div>
                            <Label htmlFor="clubAdminEmail">Email *</Label>
                            <Input
                              id="clubAdminEmail"
                              type="email"
                              value={newClubAdmin.email}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClubAdmin({...newClubAdmin, email: e.target.value})}
                              placeholder="maria@clubpadel.com"
                            />
                          </div>
                          <div>
                            <Label htmlFor="clubAdminClub">Assign to Club *</Label>
                            <Select value={newClubAdmin.clubId} onValueChange={(value: string) => setNewClubAdmin({...newClubAdmin, clubId: value})}>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a club" />
                              </SelectTrigger>
                              <SelectContent>
                                {clubs.map((club) => (
                                  <SelectItem key={club.id} value={club.id}>
                                    🏢 {club.name}
                                    {club.address && <span className="text-xs text-gray-500 ml-1">- {club.address}</span>}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label htmlFor="clubAdminPhone">Phone</Label>
                            <Input
                              id="clubAdminPhone"
                              value={newClubAdmin.phone}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClubAdmin({...newClubAdmin, phone: e.target.value})}
                              placeholder="+34 600 000 000"
                            />
                          </div>
                          <div>
                            <Label htmlFor="clubAdminPassword">Password *</Label>
                            <Input
                              id="clubAdminPassword"
                              type="password"
                              value={newClubAdmin.password}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClubAdmin({...newClubAdmin, password: e.target.value})}
                              placeholder="Enter secure password"
                            />
                          </div>
                          <div>
                            <Label htmlFor="clubAdminConfirmPassword">Confirm Password *</Label>
                            <Input
                              id="clubAdminConfirmPassword"
                              type="password"
                              value={newClubAdmin.confirmPassword}
                              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClubAdmin({...newClubAdmin, confirmPassword: e.target.value})}
                              placeholder="Confirm password"
                            />
                          </div>
                        </div>
                        <DialogFooter>
                          <Button type="submit" onClick={createClubAdmin}>
                            👑 Create Club Admin
                          </Button>
                        </DialogFooter>
                      </DialogContent>
                    </Dialog>
                  )}
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        Add Admin
                      </Button>
                    </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Administrator</DialogTitle>
                      <DialogDescription>
                        Add a new administrator to the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="adminName">Name *</Label>
                        <Input
                          id="adminName"
                          value={newUser.name}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewUser({...newUser, name: e.target.value})}
                          placeholder="Administrator name"
                        />
                      </div>
                      <div>
                        <Label htmlFor="adminEmail">Email *</Label>
                        <Input
                          id="adminEmail"
                          type="email"
                          value={newUser.email}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewUser({...newUser, email: e.target.value})}
                          placeholder="admin@example.com"
                        />
                      </div>
                      <div>
                        <Label htmlFor="adminRole">Role</Label>
                        <select 
                          id="adminRole"
                          value={newUser.role} 
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewUser({...newUser, role: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="CLUB_ADMIN">Club Admin</option>
                          <option value="SUPER_ADMIN">Super Admin</option>
                        </select>
                      </div>
                    </div>
                    <DialogFooter>
                      <Button type="submit" onClick={createUser}>Create Admin</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
                </div>
              </CardTitle>
              <CardDescription>
                View and manage system and club administrators
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Level</TableHead>
                    <TableHead>Credits</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {admins.map((admin) => (
                    <TableRow key={admin.id}>
                      <TableCell className="font-medium">{admin.name}</TableCell>
                      <TableCell>{admin.email}</TableCell>
                      <TableCell>
                        <Badge variant={admin.role === 'SUPER_ADMIN' ? 'destructive' : 'default'}>
                          {admin.role === 'SUPER_ADMIN' ? 'Super Admin' : 'Club Admin'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline">{admin.level}</Badge>
                      </TableCell>
                      <TableCell>{(admin as any).credits || 0}</TableCell>
                      <TableCell>{new Date(admin.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="clubs" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  🏢 {selectedClubId === 'all' ? 'Clubs Management' : 'Club Details'}
                </span>
                {selectedClubId === 'all' && (
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        Add Club
                      </Button>
                    </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Club</DialogTitle>
                      <DialogDescription>
                        Add a new padel club to the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="clubName">Name *</Label>
                        <Input
                          id="clubName"
                          value={newClub.name}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, name: e.target.value})}
                          placeholder="Club name"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clubAddress">Address *</Label>
                        <Input
                          id="clubAddress"
                          value={newClub.address}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, address: e.target.value})}
                          placeholder="Club address"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clubPhone">Phone</Label>
                        <Input
                          id="clubPhone"
                          value={newClub.phone}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, phone: e.target.value})}
                          placeholder="+34 123 456 789"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clubEmail">Email</Label>
                        <Input
                          id="clubEmail"
                          type="email"
                          value={newClub.email}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, email: e.target.value})}
                          placeholder="club@example.com"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clubWebsite">Website</Label>
                        <Input
                          id="clubWebsite"
                          value={newClub.website}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, website: e.target.value})}
                          placeholder="https://club.example.com"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clubAdmin">Club Administrator *</Label>
                        <Select value={newClub.adminId} onValueChange={(value: string) => setNewClub({...newClub, adminId: value})}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select an administrator" />
                          </SelectTrigger>
                          <SelectContent>
                            {admins.map((admin) => (
                              <SelectItem key={admin.id} value={admin.id}>
                                👤 {admin.name}
                                {admin.email && <span className="text-xs text-gray-500 ml-1">({admin.email})</span>}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="clubDescription">Description</Label>
                        <Input
                          id="clubDescription"
                          value={newClub.description}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClub({...newClub, description: e.target.value})}
                          placeholder="Club description"
                        />
                      </div>
                    </div>
                    <DialogFooter>
                      <Button type="submit" onClick={createClub}>Create Club</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardTitle>
              <CardDescription>
                {selectedClubId === 'all' 
                  ? 'View and manage all padel clubs in the system'
                  : `Detailed information for ${clubs.find(c => c.id === selectedClubId)?.name || 'selected club'}`
                }
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Address</TableHead>
                    <TableHead>Phone</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {clubs
                    .filter(club => selectedClubId === 'all' || club.id === selectedClubId)
                    .map((club) => (
                    <TableRow key={club.id}>
                      <TableCell className="font-medium">{club.name}</TableCell>
                      <TableCell>{club.address}</TableCell>
                      <TableCell>{club.phone}</TableCell>
                      <TableCell>{club.email}</TableCell>
                      <TableCell>{new Date(club.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="instructors" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">👨‍🏫 Instructors Management</span>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      Add Instructor
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Instructor</DialogTitle>
                      <DialogDescription>
                        Add a new instructor to the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="instructorUserId">Usuario *</Label>
                        <select
                          id="instructorUserId"
                          value={newInstructor.userId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewInstructor({...newInstructor, userId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar usuario</option>
                          {users.filter(user => user.role === 'PLAYER' || user.role === 'INSTRUCTOR').map((user) => (
                            <option key={user.id} value={user.id}>{user.name} ({user.email})</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="instructorClubId">Club *</Label>
                        <select
                          id="instructorClubId"
                          value={newInstructor.clubId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewInstructor({...newInstructor, clubId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar club</option>
                          {clubs.map((club) => (
                            <option key={club.id} value={club.id}>{club.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="instructorSpecialties">Especialidades</Label>
                        <select
                          id="instructorSpecialties"
                          value={newInstructor.specialties}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewInstructor({...newInstructor, specialties: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar especialidad</option>
                          <option value="Pádel Básico">Pádel Básico</option>
                          <option value="Pádel Avanzado">Pádel Avanzado</option>
                          <option value="Pádel Profesional">Pádel Profesional</option>
                          <option value="Fitness">Fitness</option>
                          <option value="Entrenamiento Personal">Entrenamiento Personal</option>
                          <option value="Pádel Infantil">Pádel Infantil</option>
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="instructorExperience">Experiencia</Label>
                        <select
                          id="instructorExperience"
                          value={newInstructor.experience}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewInstructor({...newInstructor, experience: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar nivel de experiencia</option>
                          <option value="1-2 años">1-2 años</option>
                          <option value="3-5 años">3-5 años</option>
                          <option value="5-10 años">5-10 años</option>
                          <option value="Más de 10 años">Más de 10 años</option>
                          <option value="Profesional certificado">Profesional certificado</option>
                        </select>
                      </div>
                    </div>
                    <DialogFooter>
                      <Button type="submit" onClick={createInstructor}>Create Instructor</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardTitle>
              <CardDescription>
                View and manage padel instructors
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>User ID</TableHead>
                    <TableHead>Club ID</TableHead>
                    <TableHead>Specialties</TableHead>
                    <TableHead>Experience</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {instructors.map((instructor) => (
                    <TableRow key={instructor.id}>
                      <TableCell className="font-mono text-xs">{instructor.id}</TableCell>
                      <TableCell className="font-mono text-xs">{instructor.userId}</TableCell>
                      <TableCell className="font-mono text-xs">{instructor.clubId}</TableCell>
                      <TableCell>{instructor.specialties || 'N/A'}</TableCell>
                      <TableCell>{instructor.experience || 'N/A'}</TableCell>
                      <TableCell>
                        <Badge variant={instructor.isActive ? 'default' : 'secondary'}>
                          {instructor.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                      </TableCell>
                      <TableCell>{new Date(instructor.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="clients" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">🏓 Clients Management</span>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      Add Client
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Client</DialogTitle>
                      <DialogDescription>
                        Add a new client/player to the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="clientName">Name *</Label>
                        <Input
                          id="clientName"
                          value={newClient.name}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClient({...newClient, name: e.target.value})}
                          placeholder="Client name"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clientEmail">Email *</Label>
                        <Input
                          id="clientEmail"
                          type="email"
                          value={newClient.email}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewClient({...newClient, email: e.target.value})}
                          placeholder="client@example.com"
                        />
                      </div>
                      <div>
                        <Label htmlFor="clientLevel">Level</Label>
                        <select 
                          id="clientLevel"
                          value={newClient.level} 
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewClient({...newClient, level: e.target.value})}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        >
                          <option value="principiante">Principiante</option>
                          <option value="intermedio">Intermedio</option>
                          <option value="avanzado">Avanzado</option>
                          <option value="profesional">Profesional</option>
                        </select>
                      </div>
                    </div>
                    <DialogFooter>
                      <Button type="submit" onClick={createClient}>Create Client</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardTitle>
              <CardDescription>
                View and manage padel players and clients
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Level</TableHead>
                    <TableHead>Credits</TableHead>
                    <TableHead>Club ID</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {clients.map((client) => (
                    <TableRow key={client.id}>
                      <TableCell className="font-medium">{client.name}</TableCell>
                      <TableCell>{client.email}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{client.level}</Badge>
                      </TableCell>
                      <TableCell>{(client as any).credits || 0}</TableCell>
                      <TableCell className="font-mono text-xs">{(client as any).clubId || 'N/A'}</TableCell>
                      <TableCell>{new Date(client.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="outline">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="users" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                Users Management
                <Dialog>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      Add User
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New User</DialogTitle>
                      <DialogDescription>
                        Add a new user to the system
                      </DialogDescription>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div>
                        <Label htmlFor="name">Name</Label>
                        <Input
                          id="name"
                          value={newUser.name}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewUser({...newUser, name: e.target.value})}
                          placeholder="User name"
                        />
                      </div>
                      <div>
                        <Label htmlFor="email">Email</Label>
                        <Input
                          id="email"
                          type="email"
                          value={newUser.email}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewUser({...newUser, email: e.target.value})}
                          placeholder="user@example.com"
                        />
                      </div>
                      <div>
                        <Label htmlFor="userClub">Club</Label>
                        <Select value={newUser.clubId} onValueChange={(value: string) => setNewUser({...newUser, clubId: value})}>
                          <SelectTrigger>
                            <SelectValue placeholder="Select a club (optional)" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="auto-assign">🌐 Auto-assign to first available club</SelectItem>
                            {clubs.map((club) => (
                              <SelectItem key={club.id} value={club.id}>
                                🏢 {club.name}
                                {club.address && <span className="text-xs text-gray-500 ml-1">- {club.address}</span>}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="level">Level</Label>
                        <Select value={newUser.level} onValueChange={(value: string) => setNewUser({...newUser, level: value})}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="principiante">Principiante</SelectItem>
                            <SelectItem value="inicial-medio">Inicial-Medio</SelectItem>
                            <SelectItem value="intermedio">Intermedio</SelectItem>
                            <SelectItem value="avanzado">Avanzado</SelectItem>
                            <SelectItem value="abierto">Abierto</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                    </div>
                    <DialogFooter>
                      <Button onClick={createUser}>Create User</Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Email</TableHead>
                    <TableHead>Level</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {users.map((user) => (
                    <TableRow key={user.id}>
                      <TableCell className="font-medium">
                        <EditableCell
                          value={user.name}
                          onSave={(newValue) => editUserInline('name', newValue, user.id)}
                          type="text"
                        />
                      </TableCell>
                      <TableCell>
                        <EditableCell
                          value={user.email}
                          onSave={(newValue) => editUserInline('email', newValue, user.id)}
                          type="email"
                        />
                      </TableCell>
                      <TableCell>
                        <EditableCell
                          value={user.level}
                          onSave={(newValue) => editUserInline('level', newValue, user.id)}
                          type="select"
                          options={['principiante', 'inicial-medio', 'intermedio', 'avanzado', 'abierto']}
                        />
                      </TableCell>
                      <TableCell>
                        <EditableCell
                          value={user.role}
                          onSave={(newValue) => editUserInline('role', newValue, user.id)}
                          type="select"
                          options={['PLAYER', 'INSTRUCTOR', 'CLUB_ADMIN', 'SUPER_ADMIN']}
                        />
                      </TableCell>
                      <TableCell>{new Date(user.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button 
                            size="sm" 
                            variant="destructive"
                            onClick={() => deleteUser(user.id)}
                            title="Eliminar usuario"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="timeslots" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Clock className="mr-2 h-5 w-5" />
                🕒 Gestión de Horarios
              </CardTitle>
              <CardDescription>
                Crea y administra horarios de clases y actividades
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6 md:grid-cols-2">
                {/* Formulario para crear nuevo horario */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">➕ Crear Nuevo Horario</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="timeslotClub">Club *</Label>
                        <select
                          id="timeslotClub"
                          value={newTimeSlot.clubId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewTimeSlot({...newTimeSlot, clubId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar club</option>
                          {clubs.map((club) => (
                            <option key={club.id} value={club.id}>{club.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="timeslotCourt">Pista</Label>
                        <select
                          id="timeslotCourt"
                          value={newTimeSlot.courtId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewTimeSlot({...newTimeSlot, courtId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Cualquier pista</option>
                          {courts
                            .filter(court => court.clubId === newTimeSlot.clubId)
                            .map((court) => (
                            <option key={court.id} value={court.id}>{court.name}</option>
                          ))}
                        </select>
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="timeslotInstructor">Instructor</Label>
                      <select
                        id="timeslotInstructor"
                        value={newTimeSlot.instructorId}
                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewTimeSlot({...newTimeSlot, instructorId: e.target.value})}
                        className="w-full p-2 border rounded"
                      >
                        <option value="">Sin instructor específico</option>
                        {instructors
                          .filter(instructor => instructor.clubId === newTimeSlot.clubId)
                          .map((instructor) => (
                          <option key={instructor.id} value={instructor.id}>{instructor.userId}</option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <Label htmlFor="timeslotDate">Fecha *</Label>
                      <Input
                        id="timeslotDate"
                        type="date"
                        value={newTimeSlot.date}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTimeSlot({...newTimeSlot, date: e.target.value})}
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="timeslotStartTime">Hora inicio *</Label>
                        <Input
                          id="timeslotStartTime"
                          type="time"
                          value={newTimeSlot.startTime}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTimeSlot({...newTimeSlot, startTime: e.target.value})}
                        />
                      </div>
                      <div>
                        <Label htmlFor="timeslotEndTime">Hora fin *</Label>
                        <Input
                          id="timeslotEndTime"
                          type="time"
                          value={newTimeSlot.endTime}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTimeSlot({...newTimeSlot, endTime: e.target.value})}
                        />
                      </div>
                    </div>
                    <div className="grid grid-cols-3 gap-4">
                      <div>
                        <Label htmlFor="timeslotLevel">Nivel</Label>
                        <select
                          id="timeslotLevel"
                          value={newTimeSlot.level}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewTimeSlot({...newTimeSlot, level: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="principiante">Principiante</option>
                          <option value="intermedio">Intermedio</option>
                          <option value="avanzado">Avanzado</option>
                          <option value="abierto">Abierto</option>
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="timeslotMaxPlayers">Máx. jugadores</Label>
                        <Input
                          id="timeslotMaxPlayers"
                          type="number"
                          min="2"
                          max="8"
                          value={newTimeSlot.maxPlayers}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTimeSlot({...newTimeSlot, maxPlayers: parseInt(e.target.value)})}
                        />
                      </div>
                      <div>
                        <Label htmlFor="timeslotPrice">Precio (€)</Label>
                        <Input
                          id="timeslotPrice"
                          type="number"
                          step="0.01"
                          value={newTimeSlot.totalPrice}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTimeSlot({...newTimeSlot, totalPrice: parseFloat(e.target.value)})}
                        />
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="timeslotCategory">Categoría</Label>
                      <select
                        id="timeslotCategory"
                        value={newTimeSlot.category}
                        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewTimeSlot({...newTimeSlot, category: e.target.value})}
                        className="w-full p-2 border rounded"
                      >
                        <option value="class">Clase</option>
                        <option value="match">Partida</option>
                        <option value="tournament">Torneo</option>
                        <option value="training">Entrenamiento</option>
                      </select>
                    </div>
                    <Button 
                      onClick={createTimeSlot}
                      className="w-full"
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Crear Horario
                    </Button>
                  </CardContent>
                </Card>

                {/* Generación automática de clases grupales */}
                <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
                  <CardHeader>
                    <CardTitle className="text-lg text-green-800">🎯 Clases Grupales Automáticas</CardTitle>
                    <CardDescription>
                      Genera propuestas de clases cada 30 min para que los usuarios se unan y formen grupos
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <Button 
                      onClick={generateGroupClasses}
                      className="w-full bg-green-600 hover:bg-green-700"
                    >
                      <Users className="mr-2 h-4 w-4" />
                      Generar Clases para Hoy
                    </Button>
                    <Button 
                      onClick={generateWeeklyClasses}
                      variant="outline"
                      className="w-full border-green-300 text-green-700 hover:bg-green-50"
                    >
                      <Calendar className="mr-2 h-4 w-4" />
                      Generar Clases (7 días)
                    </Button>
                    <div className="text-xs text-gray-600 bg-white/50 p-2 rounded">
                      💡 Las clases se crean como "abiertas" sin cancha asignada. Cuando se completen (4 jugadores), se asignará automáticamente una cancha disponible.
                    </div>
                  </CardContent>
                </Card>

                {/* Lista de horarios */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">📋 Horarios Programados ({timeSlots.length})</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                      {timeSlots.map((slot) => (
                        <div key={slot.id} className="flex items-center justify-between p-3 border rounded-lg">
                          <div className="flex items-center space-x-3">
                            <Clock className="h-5 w-5 text-blue-500" />
                            <div>
                              <div className="font-medium">
                                {new Date(slot.start).toLocaleDateString()} - {new Date(slot.start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} a {new Date(slot.end).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                              </div>
                              <div className="text-sm text-gray-500">
                                {slot.category} • {slot.level} • {slot.maxPlayers} jugadores máx • €{slot.totalPrice}
                              </div>
                            </div>
                          </div>
                          <Badge variant="outline">{slot.category}</Badge>
                        </div>
                      ))}
                      {timeSlots.length === 0 && (
                        <div className="text-center py-8 text-gray-500">
                          No hay horarios programados
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="bookings" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Bookings Management</CardTitle>
              <CardDescription>
                View all bookings as class cards showing the actual reservation details
              </CardDescription>
            </CardHeader>
            <CardContent>
              {bookings.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground">No bookings found</p>
                </div>
              ) : (
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                  {bookings.map((booking) => (
                    <AdminBookingCard key={booking.id} booking={booking} />
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="courts" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <HardHat className="mr-2 h-5 w-5" />
                🏟️ Gestión de Pistas
              </CardTitle>
              <CardDescription>
                Administra las pistas de pádel del club
              </CardDescription>
            </CardHeader>
            <CardContent className="p-6">
              <div className="grid gap-8 lg:grid-cols-2">
                {/* Formulario para crear nueva pista */}
                <div className="space-y-4">
                  <Card>
                    <CardHeader className="pb-4">
                      <CardTitle className="text-lg">➕ Añadir Nueva Pista</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="courtClub">Club *</Label>
                          <select
                            id="courtClub"
                            value={newCourt.clubId}
                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewCourt({...newCourt, clubId: e.target.value})}
                            className="w-full p-3 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          >
                            <option value="">Seleccionar club</option>
                            {clubs.map((club) => (
                              <option key={club.id} value={club.id}>{club.name}</option>
                            ))}
                          </select>
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="courtNumber">Número *</Label>
                          <Input
                            id="courtNumber"
                            type="number"
                            value={newCourt.number}
                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewCourt({...newCourt, number: parseInt(e.target.value)})}
                            placeholder="Ej: 1"
                            className="p-3"
                          />
                        </div>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="courtName">Nombre de la Pista *</Label>
                        <Input
                          id="courtName"
                          value={newCourt.name}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewCourt({...newCourt, name: e.target.value})}
                          placeholder="Ej: Pista Central"
                          className="p-3"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="courtCapacity">Capacidad (jugadores)</Label>
                        <Input
                          id="courtCapacity"
                          type="number"
                          value={newCourt.capacity}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewCourt({...newCourt, capacity: parseInt(e.target.value)})}
                          placeholder="4"
                          className="p-3"
                          min="2"
                          max="8"
                        />
                      </div>
                      <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-md">
                        <input
                          type="checkbox"
                          id="courtActive"
                          checked={newCourt.isActive}
                          onChange={(e) => setNewCourt({...newCourt, isActive: e.target.checked})}
                          className="w-4 h-4"
                        />
                        <Label htmlFor="courtActive" className="text-sm font-medium">Pista activa</Label>
                      </div>
                      <Button 
                        onClick={createCourt}
                        className="w-full h-12 text-base font-medium"
                        size="lg"
                      >
                        <Plus className="mr-2 h-5 w-5" />
                        Crear Pista
                      </Button>
                    </CardContent>
                  </Card>
                </div>

                {/* Lista de pistas */}
                <div className="space-y-4">
                  <Card>
                    <CardHeader className="pb-4">
                      <CardTitle className="text-lg flex items-center justify-between">
                        <span>📋 Pistas Registradas</span>
                        <Badge variant="secondary" className="text-sm">{courts.length}</Badge>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4 max-h-[500px] overflow-y-auto pr-2">
                        {courts.map((court) => (
                          <div key={court.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                            <div className="flex items-start justify-between">
                              <div className="flex items-center space-x-4">
                                <div className={`w-4 h-4 rounded-full flex-shrink-0 ${court.isActive ? 'bg-green-500' : 'bg-red-500'}`}></div>
                                <div className="min-w-0 flex-1">
                                  <div className="font-semibold text-lg flex items-center">
                                    🏟️ {court.name}
                                  </div>
                                  <div className="text-sm text-gray-600 mt-1">
                                    <span className="inline-block mr-4">📋 Número: {court.number}</span>
                                    <span className="inline-block">👥 Capacidad: {court.capacity} jugadores</span>
                                  </div>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2 flex-shrink-0 ml-4">
                                <Badge variant={court.isActive ? "default" : "destructive"} className="text-xs">
                                  {court.isActive ? "Activa" : "Inactiva"}
                                </Badge>
                              </div>
                            </div>
                          </div>
                        ))}
                        {courts.length === 0 && (
                          <div className="text-center text-gray-500 py-12 border-2 border-dashed border-gray-200 rounded-lg">
                            <div className="text-4xl mb-2">🏟️</div>
                            <div className="text-lg font-medium">No hay pistas registradas</div>
                            <div className="text-sm mt-1">Crea tu primera pista usando el formulario</div>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="matches" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Trophy className="mr-2 h-5 w-5" />
                🏆 Gestión de Partidas
              </CardTitle>
              <CardDescription>
                Crea y administra partidas de pádel
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6 md:grid-cols-2">
                {/* Formulario para crear nueva partida */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">➕ Crear Nueva Partida</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="matchClub">Club</Label>
                        <select
                          id="matchClub"
                          value={newMatch.clubId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewMatch({...newMatch, clubId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Seleccionar club</option>
                          {clubs.map((club) => (
                            <option key={club.id} value={club.id}>{club.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="matchCourt">Pista</Label>
                        <select
                          id="matchCourt"
                          value={newMatch.courtId}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewMatch({...newMatch, courtId: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="">Cualquier pista</option>
                          {courts
                            .filter(court => court.clubId === newMatch.clubId)
                            .map((court) => (
                            <option key={court.id} value={court.id}>{court.name}</option>
                          ))}
                        </select>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="matchDate">Fecha</Label>
                        <Input
                          id="matchDate"
                          type="date"
                          value={newMatch.date}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewMatch({...newMatch, date: e.target.value})}
                        />
                      </div>
                      <div>
                        <Label htmlFor="matchTime">Hora</Label>
                        <Input
                          id="matchTime"
                          type="time"
                          value={newMatch.time}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewMatch({...newMatch, time: e.target.value})}
                        />
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="matchLevel">Nivel</Label>
                        <select
                          id="matchLevel"
                          value={newMatch.level}
                          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setNewMatch({...newMatch, level: e.target.value})}
                          className="w-full p-2 border rounded"
                        >
                          <option value="principiante">Principiante</option>
                          <option value="intermedio">Intermedio</option>
                          <option value="avanzado">Avanzado</option>
                          <option value="profesional">Profesional</option>
                        </select>
                      </div>
                      <div>
                        <Label htmlFor="matchPrice">Precio</Label>
                        <Input
                          id="matchPrice"
                          type="number"
                          step="0.01"
                          value={newMatch.price}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewMatch({...newMatch, price: parseFloat(e.target.value)})}
                          placeholder="0.00"
                        />
                      </div>
                    </div>
                    <Button 
                      onClick={createMatch}
                      className="w-full"
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Crear Partida
                    </Button>
                  </CardContent>
                </Card>

                {/* Lista de partidas */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">📋 Partidas Programadas ({matches.length})</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                      {matches.map((match) => (
                        <div key={match.id} className="flex items-center justify-between p-3 border rounded-lg">
                          <div className="flex items-center space-x-3">
                            <Trophy className="h-5 w-5 text-yellow-500" />
                            <div>
                              <div className="font-medium">
                                🏆 {new Date(match.start).toLocaleDateString()} - {new Date(match.start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                              </div>
                              <div className="text-sm text-gray-500">
                                Nivel: {match.level} | Precio: €{match.totalPrice || 0}
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Badge>{match.maxPlayers} jugadores</Badge>
                          </div>
                        </div>
                      ))}
                      {matches.length === 0 && (
                        <div className="text-center text-gray-500 py-8">
                          No hay partidas programadas
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="calendar" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <CalendarDays className="mr-2 h-5 w-5" />
                📅 Calendario de Actividades
              </CardTitle>
              <CardDescription>
                Vista general de clases y partidas programadas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center text-gray-500 py-8">
                <CalendarDays className="h-16 w-16 mx-auto mb-4 opacity-50" />
                <p className="text-lg mb-2">Calendario de Actividades</p>
                <p className="text-sm">Esta funcionalidad estará disponible próximamente</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="rates" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <DollarSign className="mr-2 h-5 w-5" />
                💰 Configuración de Tarifas
              </CardTitle>
              <CardDescription>
                Define los precios para clases y partidas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center text-gray-500 py-8">
                <DollarSign className="h-16 w-16 mx-auto mb-4 opacity-50" />
                <p className="text-lg mb-2">Gestión de Tarifas</p>
                <p className="text-sm">Esta funcionalidad estará disponible próximamente</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="mr-2 h-5 w-5" />
                ⚙️ Configuración del Sistema
              </CardTitle>
              <CardDescription>
                Ajustes generales y configuración avanzada
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center text-gray-500 py-8">
                <Settings className="h-16 w-16 mx-auto mb-4 opacity-50" />
                <p className="text-lg mb-2">Configuración del Sistema</p>
                <p className="text-sm">Esta funcionalidad estará disponible próximamente</p>
              </div>
            </CardContent>
          </Card>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

