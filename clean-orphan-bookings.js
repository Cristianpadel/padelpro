// Script para limpiar reservas hu√©rfanas con IDs antiguos
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function cleanOrphanBookings() {
  try {
    console.log('\nüßπ LIMPIEZA DE RESERVAS HU√âRFANAS\n');
    console.log('='.repeat(60));

    // IDs antiguos que ya no existen
    const oldIds = ['user-1', 'cmfwmut4v0001tgs0en3il18d'];

    console.log('\nüîç Buscando reservas con IDs antiguos...');
    
    const orphanBookings = await prisma.booking.findMany({
      where: {
        userId: {
          in: oldIds
        }
      }
    });

    console.log(`\nüìä Encontradas ${orphanBookings.length} reservas hu√©rfanas`);

    if (orphanBookings.length === 0) {
      console.log('‚úÖ No hay reservas hu√©rfanas para limpiar');
      return;
    }

    console.log('\n‚ö†Ô∏è  Las siguientes reservas ser√°n eliminadas:');
    orphanBookings.forEach((b, i) => {
      console.log(`   ${i + 1}. User ID: ${b.userId.substring(0, 10)}..., TimeSlot: ${b.timeSlotId.substring(0, 15)}..., Status: ${b.status}`);
    });

    // Confirmar eliminaci√≥n
    console.log('\nüóëÔ∏è  Eliminando reservas hu√©rfanas...');
    
    const result = await prisma.booking.deleteMany({
      where: {
        userId: {
          in: oldIds
        }
      }
    });

    console.log(`\n‚úÖ Eliminadas ${result.count} reservas hu√©rfanas`);

    // Verificar que Alex Garc√≠a todav√≠a tiene sus reservas v√°lidas
    const alexBookings = await prisma.booking.count({
      where: {
        userId: 'cmge3nlkv0001tg30p0pw8hdm'
      }
    });

    console.log(`\n‚úÖ Alex Garc√≠a mantiene ${alexBookings} reservas v√°lidas`);

    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ Limpieza completada exitosamente\n');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanOrphanBookings();
