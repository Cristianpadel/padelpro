generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  profilePictureUrl String?
  phone             String?
  level             String         @default("principiante")
  position          String?
  clubId            String?
  role              Role           @default(PLAYER)
  preference        UserPreference @default(NORMAL)
  visibility        UserVisibility @default(PUBLIC)
  bio               String?
  credits           Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  bookings          Booking[]
  instructorProfile Instructor?
  playerMatches     MatchPlayer[]
  club              Club?          @relation(fields: [clubId], references: [id])

  @@map("User")
}

model Club {
  id          String       @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courts      Court[]
  instructors Instructor[]
  matches     Match[]
  timeSlots   TimeSlot[]
  users       User[]

  @@map("Club")
}

model Court {
  id        String     @id @default(cuid())
  name      String
  clubId    String
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  club      Club       @relation(fields: [clubId], references: [id])
  matches   Match[]
  timeSlots TimeSlot[]

  @@map("Court")
}

model Instructor {
  id          String     @id @default(cuid())
  userId      String     @unique
  clubId      String?
  isActive    Boolean    @default(true)
  experience  String?
  specialties String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  club        Club?      @relation(fields: [clubId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  timeSlots   TimeSlot[]

  @@map("Instructor")
}

model TimeSlot {
  id             String    @id @default(cuid())
  courtId        String?
  instructorId   String?
  clubId         String?
  date           String
  startTime      String
  endTime        String
  maxParticipants Int      @default(4)
  price          Float
  isActive       Boolean   @default(true)
  classType      String?   @default("general")
  level          String?   @default("abierto")
  description    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
  club           Club?     @relation(fields: [clubId], references: [id])
  court          Court?    @relation(fields: [courtId], references: [id])
  instructor     Instructor? @relation(fields: [instructorId], references: [id])
  matches        Match[]

  @@map("TimeSlot")
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  timeSlotId String
  groupSize  Int           @default(1)
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  timeSlot   TimeSlot      @relation(fields: [timeSlotId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@unique([userId, timeSlotId, groupSize])
  @@map("Booking")
}

model Match {
  id          String             @id @default(cuid())
  clubId      String?
  courtId     String?
  timeSlotId  String?
  date        String
  startTime   String
  endTime     String
  isPrivate   Boolean            @default(false)
  isConfirmed Boolean            @default(false)
  maxPlayers  Int                @default(4)
  price       Float?
  level       String?            @default("abierto")
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  club        Club?              @relation(fields: [clubId], references: [id])
  court       Court?             @relation(fields: [courtId], references: [id])
  timeSlot    TimeSlot?          @relation(fields: [timeSlotId], references: [id])
  players     MatchPlayer[]

  @@map("Match")
}

model MatchPlayer {
  id       String @id @default(cuid())
  matchId  String
  userId   String
  status   String @default("CONFIRMED")
  position String?
  match    Match  @relation(fields: [matchId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([matchId, userId])
  @@map("MatchPlayer")
}

enum Role {
  PLAYER
  INSTRUCTOR
  CLUB_ADMIN
  SUPER_ADMIN
}

enum UserPreference {
  NORMAL
  PREMIUM
  VIP
}

enum UserVisibility {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}